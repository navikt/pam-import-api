import org.jetbrains.kotlin.gradle.dsl.JvmTarget

plugins {
    id "org.jetbrains.kotlin.jvm" version "$kotlinVersion"
    id "org.jetbrains.kotlin.kapt" version "$kotlinVersion"
    id "org.jetbrains.kotlin.plugin.allopen" version "$kotlinVersion"
    id "com.github.johnrengelman.shadow" version "$shadowVersion"
    id "com.github.ben-manes.versions" version "$gradleVersionsPlugin"
    id "application"
}

version "0.4"
group "no.nav.arbeidsplassen.importapi"

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url = uri("https://packages.confluent.io/maven/")
    }
    maven { url("https://jitpack.io") }
    maven { url "https://github-package-registry-mirror.gc.nav.no/cached/maven-release" }
}

configurations {
    developmentOnly
}

dependencies {
    implementation platform("io.micronaut.platform:micronaut-platform:$micronautVersion")
    implementation "io.micronaut:micronaut-runtime"
    implementation "io.micronaut:micronaut-http-server-netty"
    implementation "io.micronaut:micronaut-http-client"
    implementation "io.micronaut:micronaut-jackson-databind"

    kapt platform("io.micronaut.platform:micronaut-platform:$micronautVersion")
    kaptTest platform("io.micronaut.platform:micronaut-platform:$micronautVersion")

    kapt "io.micronaut:micronaut-inject-java"
    kapt "io.micronaut.validation:micronaut-validation"
    kapt("io.micronaut.openapi:micronaut-openapi:$micronautOpenApiVersion")
    kapt("io.micronaut.data:micronaut-data-processor:$micronautDataVersion")
    kapt "io.micronaut.security:micronaut-security-annotations"

    implementation "org.yaml:snakeyaml:2.2"
    implementation("io.swagger.core.v3:swagger-annotations")
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin:$jacksonVersion"
    implementation("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jacksonVersion")
    implementation "ch.qos.logback:logback-classic:$logbackVersion"
    implementation "net.logstash.logback:logstash-logback-encoder:$logbackEncoderVersion"

    implementation "jakarta.annotation:jakarta.annotation-api:2.1.1"
    implementation "jakarta.transaction:jakarta.transaction-api:2.0.1"

    implementation "io.micronaut.micrometer:micronaut-micrometer-core"
    implementation "io.micronaut.micrometer:micronaut-micrometer-registry-prometheus"
    implementation "io.micronaut:micronaut-management"
    implementation("io.micronaut.kafka:micronaut-kafka:${micronautKafkaVersion}") {
        exclude group: 'org.apache.kafka:kafka-clients'
    }
    implementation "org.apache.kafka:kafka-clients:3.6.1"

    implementation "io.micronaut.data:micronaut-data-jdbc:$micronautDataVersion"
    implementation "io.micronaut.sql:micronaut-jdbc-hikari:$micronautSQLVersion"
    implementation "jakarta.persistence:jakarta.persistence-api:$jakartaPersistence"
    implementation "io.micronaut.flyway:micronaut-flyway"
    runtimeOnly("org.flywaydb:flyway-database-postgresql")

    implementation "no.nav.arbeid.pam:pam-ansettelseskodeverk:$pamAnsettelsesKodeverkVersion"
    implementation "no.nav.arbeid.pam:pam-styrk-yrkeskategori-mapper:$pamStyrkKategoriMapperVersion"
    implementation "org.postgresql:postgresql:$postgresqlVersion"
    implementation "io.micronaut.security:micronaut-security-jwt"
    implementation "io.swagger.core.v3:swagger-annotations"
    implementation "com.googlecode.owasp-java-html-sanitizer:owasp-java-html-sanitizer:$htmlSanitizer"
    implementation('org.apache.commons:commons-text:1.10.0')
    implementation("io.micronaut.cache:micronaut-cache-caffeine")
    implementation("io.micronaut.rxjava3:micronaut-rxjava3")
    implementation("io.micronaut.rxjava3:micronaut-rxjava3-http-client")
    testImplementation("org.testcontainers:postgresql:${tcVersion}")
    testImplementation("org.testcontainers:kafka:${tcVersion}")
    testImplementation "io.micronaut.test:micronaut-test-junit5"
    testImplementation "org.junit.jupiter:junit-jupiter-engine:$jupiterEngineVersion"
    testImplementation("com.squareup.okhttp3:mockwebserver:$okhttpserverVersion")
    testImplementation "org.mockito.kotlin:mockito-kotlin:5.2.1"
    testImplementation("net.javacrumbs.json-unit:json-unit:4.1.0")
}

test.classpath += configurations.developmentOnly

application {
    mainClass = "no.nav.arbeidsplassen.importapi.Application"
}

test {
    useJUnitPlatform()
}

allOpen {
    annotation("io.micronaut.aop.Around")
    annotation("no.nav.arbeidsplassen.importapi.Open")
}

kapt {
    correctErrorTypes true
}

compileKotlin {
    compilerOptions {
        jvmTarget.set(JvmTarget.JVM_21)
        //Will retain parameter names for Java reflection
        javaParameters = true
    }
}

compileTestKotlin {
    compilerOptions {
        jvmTarget.set(JvmTarget.JVM_21)
        javaParameters = true
    }
}

shadowJar {
    mergeServiceFiles()
}

run.classpath += configurations.developmentOnly
run.jvmArgs("-noverify", "-XX:TieredStopAtLevel=1", "-Dcom.sun.management.jmxremote", "-Dlogback.configurationFile=src/test/resources/logback-test.xml")
