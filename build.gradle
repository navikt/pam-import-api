plugins {
    id "org.jetbrains.kotlin.jvm" version "$kotlinVersion"
    id "org.jetbrains.kotlin.kapt" version "$kotlinVersion"
    id "org.jetbrains.kotlin.plugin.allopen" version "$kotlinVersion"
    id "com.github.johnrengelman.shadow" version "$shadowVersion"
    id "com.github.ben-manes.versions" version "$gradleVersionsPlugin"
    id "application"
}

version "0.4"
group "no.nav.arbeidsplassen.importapi"

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://jcenter.bintray.com" }
    maven { url "https://github-package-registry-mirror.gc.nav.no/cached/maven-release"}
}

configurations {
    developmentOnly
}

dependencies {
    implementation platform("io.micronaut:micronaut-bom:$micronautVersion")
    implementation "io.micronaut:micronaut-runtime"
    implementation "io.micronaut:micronaut-http-server-netty"
    implementation "io.micronaut:micronaut-http-client"

    kapt platform("io.micronaut:micronaut-bom:$micronautVersion")
    kaptTest platform("io.micronaut:micronaut-bom:$micronautVersion")

    kapt "io.micronaut:micronaut-inject-java"
    kapt "io.micronaut:micronaut-validation"
    kapt("io.micronaut.openapi:micronaut-openapi:$micronautOpenApiVersion")
    kapt("io.micronaut.data:micronaut-data-processor:$micronautDataVersion")
    kapt "io.micronaut.security:micronaut-security-annotations"

    implementation("io.swagger.core.v3:swagger-annotations")
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin:$jacksonVersion"
    implementation "ch.qos.logback:logback-classic:$logbackVersion"
    implementation "net.logstash.logback:logstash-logback-encoder:$logbackEncoderVersion"

    testImplementation "io.micronaut.test:micronaut-test-junit5"
    testImplementation "org.junit.jupiter:junit-jupiter-engine:$jupiterEngineVersion"

    implementation "io.micronaut.micrometer:micronaut-micrometer-core:$micronautVersion"
    implementation "io.micronaut.micrometer:micronaut-micrometer-registry-prometheus:$micronautVersion"
    implementation "io.micronaut:micronaut-management:$micronautVersion"
    implementation ("io.micronaut.kafka:micronaut-kafka:${micronautKafkaVersion}") {
        exclude group: 'org.apache.kafka:kafka-clients'
    }
    implementation "org.apache.kafka:kafka-clients:2.8.2"

    implementation "io.micronaut.data:micronaut-data-jdbc:$micronautDataVersion"
    implementation "io.micronaut.sql:micronaut-jdbc-hikari:$micronautSQLVersion"
    implementation "jakarta.persistence:jakarta.persistence-api:$jakartaPersistence"
    implementation "io.micronaut.flyway:micronaut-flyway"

    implementation "no.nav.arbeid.pam:pam-ansettelseskodeverk:$pamAnsettelsesKodeverkVersion"
    implementation "no.nav.arbeid.pam:pam-styrk-yrkeskategori-mapper:$pamStyrkKategoriMapperVersion"
    implementation "org.postgresql:postgresql:$postgresqlVersion"
    implementation "io.micronaut.security:micronaut-security-jwt"
    implementation "io.swagger.core.v3:swagger-annotations"
    implementation "com.googlecode.owasp-java-html-sanitizer:owasp-java-html-sanitizer:$htmlSanitizer"
    implementation('org.apache.commons:commons-text:1.10.0')
    implementation("io.micronaut.cache:micronaut-cache-caffeine")
    implementation("io.micronaut.rxjava2:micronaut-rxjava2")
    implementation("io.micronaut.rxjava2:micronaut-rxjava2-http-client")
    testImplementation("org.testcontainers:postgresql:${tcVersion}")
 }

test.classpath += configurations.developmentOnly

application {
    mainClass = "no.nav.arbeidsplassen.importapi.Application"
}

test {
    exclude "**/*IT.class"
    useJUnitPlatform()
}

task integration(type: Test) {
    include "**/*IT.class"
    useJUnitPlatform()
}


allOpen {
    annotation("io.micronaut.aop.Around")
    annotation("no.nav.arbeidsplassen.importapi.Open")
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "17"
        //Will retain parameter names for Java reflection
        javaParameters = true
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = "17"
        javaParameters = true
    }
}

shadowJar {
    mergeServiceFiles()
}

run.classpath += configurations.developmentOnly
run.jvmArgs("-noverify", "-XX:TieredStopAtLevel=1", "-Dcom.sun.management.jmxremote", "-Dlogback.configurationFile=src/test/resources/logback-test.xml")
